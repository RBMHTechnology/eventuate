eventuate {
  # This section contains all cluster-wide configuration values.
  cassandra {
    # Comma-separated list of contact points in the cluster (comma-separated
    # hostname or hostname:port list).
    contact-points = ["127.0.0.1"]

    # Default port of contact points in the cluster. Ports defined in
    # contact-points override this setting.
    default-port = 9042

    # Default Cassandra username
    username = "cassandra"

    # Default Cassandra password
    password = "cassandra"

    # Name of the keyspace created/used by Eventuate.
    keyspace = "eventuate"

    # Whether or not to auto-create the keyspace.
    keyspace-autocreate = true

    # Prefix of all tables created/used by Eventuate.
    table-prefix = "log"

    # Replication factor to use when creating the keyspace.
    replication-factor = 1

    # Write consistency level
    write-consistency = "QUORUM"

    # Read consistency level
    read-consistency = "QUORUM"

    # Maximum number of initial connection retries to a Cassandra cluster.
    connect-retry-max = 3

    # Delay between initial connection retries to a Cassandra cluster.
    connect-retry-delay = 5s
  }

  # Below you can configure the default cassandra event log settings. You can
  # override these values on a per-eventlog level using the config section:
  #   'eventuate.log.cassandra.<log-id>'
  log.cassandra {
    # Maximum number of times a failed write should be retried until the event
    # log actor gives up and stops itself. The delay between write retries can
    # be configured with eventuate.log.write-timeout.
    write-retry-max = 65536

    # Write consistency level
    write-consistency = ${eventuate.cassandra.write-consistency}

    # Read consistency level
    read-consistency = ${eventuate.cassandra.read-consistency}

    # Timeout for write operations to a local event log. These are batch
    # event writes made by event-sourced processors and replicators. This
    # timeout does not apply to event-sourced actor writes.
    write-timeout = ${eventuate.log.write-timeout}

    # Target batch size for writing events. It is used by the batching layer
    # to limit the size of event batches to be written atomically to an event
    # log. It also limits the size of event batches replicated from remote
    # source logs and to a local target log. Please note that this is not
    # a strict batch size limit. Event-sourced actors can still emit batches
    # of larger size (although it is very uncommon to emit that many events
    # per command).
    write-batch-size = ${eventuate.log.write-batch-size}

    # Maximum number of events stored per event log partition. Must be greater
    # than eventuate.log.write-batch-size.
    partition-size = 131072

    # Minimum number of new events that must have been written before another
    # index update is triggered.
    index-update-limit = 64

    # Maximum number event log initialization retries. Initialization includes
    # recovery of the current sequence number and version vector as well as
    # indexing of not yet indexed log entries.
    init-retry-max = 3

    # Delay between event log initialization retries. Initialization includes
    # recovery of the current sequence number and version vector as well as
    # indexing of not yet indexed log entries.
    init-retry-delay = 5s
  }

  log.dispatchers {
    write-dispatcher {
      executor = "thread-pool-executor"
      type = PinnedDispatcher
    }

    read-dispatcher {
      type = Dispatcher
      executor = "fork-join-executor"
      fork-join-executor {
        parallelism-min = 2
        parallelism-max = 16
      }
    }
  }
}
